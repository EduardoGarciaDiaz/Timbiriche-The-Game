//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TimbiricheViews.Server {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Player", Namespace="http://schemas.datacontract.org/2004/07/TimbiricheService")]
    [System.SerializableAttribute()]
    public partial class Player : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private TimbiricheViews.Server.Account AccountFKField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CoinsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdColorSelectedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdPlayerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdStyleSelectedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SaltField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UsernameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TimbiricheViews.Server.Account AccountFK {
            get {
                return this.AccountFKField;
            }
            set {
                if ((object.ReferenceEquals(this.AccountFKField, value) != true)) {
                    this.AccountFKField = value;
                    this.RaisePropertyChanged("AccountFK");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Coins {
            get {
                return this.CoinsField;
            }
            set {
                if ((this.CoinsField.Equals(value) != true)) {
                    this.CoinsField = value;
                    this.RaisePropertyChanged("Coins");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int IdColorSelected {
            get {
                return this.IdColorSelectedField;
            }
            set {
                if ((this.IdColorSelectedField.Equals(value) != true)) {
                    this.IdColorSelectedField = value;
                    this.RaisePropertyChanged("IdColorSelected");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int IdPlayer {
            get {
                return this.IdPlayerField;
            }
            set {
                if ((this.IdPlayerField.Equals(value) != true)) {
                    this.IdPlayerField = value;
                    this.RaisePropertyChanged("IdPlayer");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int IdStyleSelected {
            get {
                return this.IdStyleSelectedField;
            }
            set {
                if ((this.IdStyleSelectedField.Equals(value) != true)) {
                    this.IdStyleSelectedField = value;
                    this.RaisePropertyChanged("IdStyleSelected");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Salt {
            get {
                return this.SaltField;
            }
            set {
                if ((object.ReferenceEquals(this.SaltField, value) != true)) {
                    this.SaltField = value;
                    this.RaisePropertyChanged("Salt");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Status {
            get {
                return this.StatusField;
            }
            set {
                if ((object.ReferenceEquals(this.StatusField, value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Username {
            get {
                return this.UsernameField;
            }
            set {
                if ((object.ReferenceEquals(this.UsernameField, value) != true)) {
                    this.UsernameField = value;
                    this.RaisePropertyChanged("Username");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Account", Namespace="http://schemas.datacontract.org/2004/07/TimbiricheService")]
    [System.SerializableAttribute()]
    public partial class Account : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime BirthdateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdAcccountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LastNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SurnameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Birthdate {
            get {
                return this.BirthdateField;
            }
            set {
                if ((this.BirthdateField.Equals(value) != true)) {
                    this.BirthdateField = value;
                    this.RaisePropertyChanged("Birthdate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int IdAcccount {
            get {
                return this.IdAcccountField;
            }
            set {
                if ((this.IdAcccountField.Equals(value) != true)) {
                    this.IdAcccountField = value;
                    this.RaisePropertyChanged("IdAcccount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LastName {
            get {
                return this.LastNameField;
            }
            set {
                if ((object.ReferenceEquals(this.LastNameField, value) != true)) {
                    this.LastNameField = value;
                    this.RaisePropertyChanged("LastName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Surname {
            get {
                return this.SurnameField;
            }
            set {
                if ((object.ReferenceEquals(this.SurnameField, value) != true)) {
                    this.SurnameField = value;
                    this.RaisePropertyChanged("Surname");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LobbyInformation", Namespace="http://schemas.datacontract.org/2004/07/TimbiricheService")]
    [System.SerializableAttribute()]
    public partial class LobbyInformation : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int MatchDurationInMinutesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TurnDurationInMinutesField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MatchDurationInMinutes {
            get {
                return this.MatchDurationInMinutesField;
            }
            set {
                if ((this.MatchDurationInMinutesField.Equals(value) != true)) {
                    this.MatchDurationInMinutesField = value;
                    this.RaisePropertyChanged("MatchDurationInMinutes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TurnDurationInMinutes {
            get {
                return this.TurnDurationInMinutesField;
            }
            set {
                if ((this.TurnDurationInMinutesField.Equals(value) != true)) {
                    this.TurnDurationInMinutesField = value;
                    this.RaisePropertyChanged("TurnDurationInMinutes");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LobbyPlayer", Namespace="http://schemas.datacontract.org/2004/07/TimbiricheService")]
    [System.SerializableAttribute()]
    public partial class LobbyPlayer : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int HexadecimalColorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int StylePathField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UsernameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int HexadecimalColor {
            get {
                return this.HexadecimalColorField;
            }
            set {
                if ((this.HexadecimalColorField.Equals(value) != true)) {
                    this.HexadecimalColorField = value;
                    this.RaisePropertyChanged("HexadecimalColor");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int StylePath {
            get {
                return this.StylePathField;
            }
            set {
                if ((this.StylePathField.Equals(value) != true)) {
                    this.StylePathField = value;
                    this.RaisePropertyChanged("StylePath");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Username {
            get {
                return this.UsernameField;
            }
            set {
                if ((object.ReferenceEquals(this.UsernameField, value) != true)) {
                    this.UsernameField = value;
                    this.RaisePropertyChanged("Username");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PlayerColor", Namespace="http://schemas.datacontract.org/2004/07/TimbiricheService")]
    [System.SerializableAttribute()]
    public partial class PlayerColor : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdColorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdPlayerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdPlayerColorsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int IdColor {
            get {
                return this.IdColorField;
            }
            set {
                if ((this.IdColorField.Equals(value) != true)) {
                    this.IdColorField = value;
                    this.RaisePropertyChanged("IdColor");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int IdPlayer {
            get {
                return this.IdPlayerField;
            }
            set {
                if ((this.IdPlayerField.Equals(value) != true)) {
                    this.IdPlayerField = value;
                    this.RaisePropertyChanged("IdPlayer");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int IdPlayerColors {
            get {
                return this.IdPlayerColorsField;
            }
            set {
                if ((this.IdPlayerColorsField.Equals(value) != true)) {
                    this.IdPlayerColorsField = value;
                    this.RaisePropertyChanged("IdPlayerColors");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PlayerStyle", Namespace="http://schemas.datacontract.org/2004/07/TimbiricheService")]
    [System.SerializableAttribute()]
    public partial class PlayerStyle : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdPlayerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdPlayerStyleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdStyleField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int IdPlayer {
            get {
                return this.IdPlayerField;
            }
            set {
                if ((this.IdPlayerField.Equals(value) != true)) {
                    this.IdPlayerField = value;
                    this.RaisePropertyChanged("IdPlayer");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int IdPlayerStyle {
            get {
                return this.IdPlayerStyleField;
            }
            set {
                if ((this.IdPlayerStyleField.Equals(value) != true)) {
                    this.IdPlayerStyleField = value;
                    this.RaisePropertyChanged("IdPlayerStyle");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int IdStyle {
            get {
                return this.IdStyleField;
            }
            set {
                if ((this.IdStyleField.Equals(value) != true)) {
                    this.IdStyleField = value;
                    this.RaisePropertyChanged("IdStyle");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Server.IUserManager")]
    public interface IUserManager {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/AddUser", ReplyAction="http://tempuri.org/IUserManager/AddUserResponse")]
        int AddUser(TimbiricheViews.Server.Player player);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/AddUser", ReplyAction="http://tempuri.org/IUserManager/AddUserResponse")]
        System.Threading.Tasks.Task<int> AddUserAsync(TimbiricheViews.Server.Player player);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/ValidateLoginCredentials", ReplyAction="http://tempuri.org/IUserManager/ValidateLoginCredentialsResponse")]
        TimbiricheViews.Server.Player ValidateLoginCredentials(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/ValidateLoginCredentials", ReplyAction="http://tempuri.org/IUserManager/ValidateLoginCredentialsResponse")]
        System.Threading.Tasks.Task<TimbiricheViews.Server.Player> ValidateLoginCredentialsAsync(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/ValidateUniqueIdentifierUser", ReplyAction="http://tempuri.org/IUserManager/ValidateUniqueIdentifierUserResponse")]
        bool ValidateUniqueIdentifierUser(string identifier);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/ValidateUniqueIdentifierUser", ReplyAction="http://tempuri.org/IUserManager/ValidateUniqueIdentifierUserResponse")]
        System.Threading.Tasks.Task<bool> ValidateUniqueIdentifierUserAsync(string identifier);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IUserManagerChannel : TimbiricheViews.Server.IUserManager, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UserManagerClient : System.ServiceModel.ClientBase<TimbiricheViews.Server.IUserManager>, TimbiricheViews.Server.IUserManager {
        
        public UserManagerClient() {
        }
        
        public UserManagerClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public UserManagerClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UserManagerClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UserManagerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int AddUser(TimbiricheViews.Server.Player player) {
            return base.Channel.AddUser(player);
        }
        
        public System.Threading.Tasks.Task<int> AddUserAsync(TimbiricheViews.Server.Player player) {
            return base.Channel.AddUserAsync(player);
        }
        
        public TimbiricheViews.Server.Player ValidateLoginCredentials(string username, string password) {
            return base.Channel.ValidateLoginCredentials(username, password);
        }
        
        public System.Threading.Tasks.Task<TimbiricheViews.Server.Player> ValidateLoginCredentialsAsync(string username, string password) {
            return base.Channel.ValidateLoginCredentialsAsync(username, password);
        }
        
        public bool ValidateUniqueIdentifierUser(string identifier) {
            return base.Channel.ValidateUniqueIdentifierUser(identifier);
        }
        
        public System.Threading.Tasks.Task<bool> ValidateUniqueIdentifierUserAsync(string identifier) {
            return base.Channel.ValidateUniqueIdentifierUserAsync(identifier);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Server.IOnlineUsersManager", CallbackContract=typeof(TimbiricheViews.Server.IOnlineUsersManagerCallback))]
    public interface IOnlineUsersManager {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IOnlineUsersManager/RegisterUserToOnlineUsers")]
        void RegisterUserToOnlineUsers(int idPlayer, string username);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IOnlineUsersManager/RegisterUserToOnlineUsers")]
        System.Threading.Tasks.Task RegisterUserToOnlineUsersAsync(int idPlayer, string username);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IOnlineUsersManager/UnregisterUserToOnlineUsers")]
        void UnregisterUserToOnlineUsers(string username);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IOnlineUsersManager/UnregisterUserToOnlineUsers")]
        System.Threading.Tasks.Task UnregisterUserToOnlineUsersAsync(string username);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IOnlineUsersManagerCallback {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOnlineUsersManager/NotifyUserLoggedIn", ReplyAction="http://tempuri.org/IOnlineUsersManager/NotifyUserLoggedInResponse")]
        void NotifyUserLoggedIn(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOnlineUsersManager/NotifyUserLoggedOut", ReplyAction="http://tempuri.org/IOnlineUsersManager/NotifyUserLoggedOutResponse")]
        void NotifyUserLoggedOut(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOnlineUsersManager/NotifyOnlineFriends", ReplyAction="http://tempuri.org/IOnlineUsersManager/NotifyOnlineFriendsResponse")]
        void NotifyOnlineFriends(string[] onlineUsernames);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IOnlineUsersManagerChannel : TimbiricheViews.Server.IOnlineUsersManager, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class OnlineUsersManagerClient : System.ServiceModel.DuplexClientBase<TimbiricheViews.Server.IOnlineUsersManager>, TimbiricheViews.Server.IOnlineUsersManager {
        
        public OnlineUsersManagerClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public OnlineUsersManagerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public OnlineUsersManagerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public OnlineUsersManagerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public OnlineUsersManagerClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void RegisterUserToOnlineUsers(int idPlayer, string username) {
            base.Channel.RegisterUserToOnlineUsers(idPlayer, username);
        }
        
        public System.Threading.Tasks.Task RegisterUserToOnlineUsersAsync(int idPlayer, string username) {
            return base.Channel.RegisterUserToOnlineUsersAsync(idPlayer, username);
        }
        
        public void UnregisterUserToOnlineUsers(string username) {
            base.Channel.UnregisterUserToOnlineUsers(username);
        }
        
        public System.Threading.Tasks.Task UnregisterUserToOnlineUsersAsync(string username) {
            return base.Channel.UnregisterUserToOnlineUsersAsync(username);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Server.IPasswordReset")]
    public interface IPasswordReset {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPasswordReset/SendResetToken", ReplyAction="http://tempuri.org/IPasswordReset/SendResetTokenResponse")]
        bool SendResetToken(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPasswordReset/SendResetToken", ReplyAction="http://tempuri.org/IPasswordReset/SendResetTokenResponse")]
        System.Threading.Tasks.Task<bool> SendResetTokenAsync(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPasswordReset/ValidateResetToken", ReplyAction="http://tempuri.org/IPasswordReset/ValidateResetTokenResponse")]
        bool ValidateResetToken(string email, int token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPasswordReset/ValidateResetToken", ReplyAction="http://tempuri.org/IPasswordReset/ValidateResetTokenResponse")]
        System.Threading.Tasks.Task<bool> ValidateResetTokenAsync(string email, int token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPasswordReset/ChangePassword", ReplyAction="http://tempuri.org/IPasswordReset/ChangePasswordResponse")]
        bool ChangePassword(string newPassword, string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPasswordReset/ChangePassword", ReplyAction="http://tempuri.org/IPasswordReset/ChangePasswordResponse")]
        System.Threading.Tasks.Task<bool> ChangePasswordAsync(string newPassword, string email);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPasswordResetChannel : TimbiricheViews.Server.IPasswordReset, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PasswordResetClient : System.ServiceModel.ClientBase<TimbiricheViews.Server.IPasswordReset>, TimbiricheViews.Server.IPasswordReset {
        
        public PasswordResetClient() {
        }
        
        public PasswordResetClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public PasswordResetClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PasswordResetClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PasswordResetClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool SendResetToken(string email) {
            return base.Channel.SendResetToken(email);
        }
        
        public System.Threading.Tasks.Task<bool> SendResetTokenAsync(string email) {
            return base.Channel.SendResetTokenAsync(email);
        }
        
        public bool ValidateResetToken(string email, int token) {
            return base.Channel.ValidateResetToken(email, token);
        }
        
        public System.Threading.Tasks.Task<bool> ValidateResetTokenAsync(string email, int token) {
            return base.Channel.ValidateResetTokenAsync(email, token);
        }
        
        public bool ChangePassword(string newPassword, string email) {
            return base.Channel.ChangePassword(newPassword, email);
        }
        
        public System.Threading.Tasks.Task<bool> ChangePasswordAsync(string newPassword, string email) {
            return base.Channel.ChangePasswordAsync(newPassword, email);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Server.ILobbyManager", CallbackContract=typeof(TimbiricheViews.Server.ILobbyManagerCallback))]
    public interface ILobbyManager {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILobbyManager/CreateLobby")]
        void CreateLobby(TimbiricheViews.Server.LobbyInformation lobbyInformation, TimbiricheViews.Server.LobbyPlayer lobbyPlayer);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILobbyManager/CreateLobby")]
        System.Threading.Tasks.Task CreateLobbyAsync(TimbiricheViews.Server.LobbyInformation lobbyInformation, TimbiricheViews.Server.LobbyPlayer lobbyPlayer);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILobbyManager/StartMatch")]
        void StartMatch(string lobbyCode);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILobbyManager/StartMatch")]
        System.Threading.Tasks.Task StartMatchAsync(string lobbyCode);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILobbyManager/JoinLobby")]
        void JoinLobby(string lobbyCode, TimbiricheViews.Server.LobbyPlayer lobbyPlayer);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILobbyManager/JoinLobby")]
        System.Threading.Tasks.Task JoinLobbyAsync(string lobbyCode, TimbiricheViews.Server.LobbyPlayer lobbyPlayer);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ILobbyManagerCallback {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILobbyManager/NotifyLobbyCreated", ReplyAction="http://tempuri.org/ILobbyManager/NotifyLobbyCreatedResponse")]
        void NotifyLobbyCreated(string lobbyCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILobbyManager/NotifyPlayersInLobby", ReplyAction="http://tempuri.org/ILobbyManager/NotifyPlayersInLobbyResponse")]
        void NotifyPlayersInLobby(string lobbyCode, TimbiricheViews.Server.LobbyPlayer[] lobbyPlayers);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILobbyManager/NotifyPlayerJoinToLobby", ReplyAction="http://tempuri.org/ILobbyManager/NotifyPlayerJoinToLobbyResponse")]
        void NotifyPlayerJoinToLobby(TimbiricheViews.Server.LobbyPlayer lobbyPlayer, int numOfPlayersInLobby);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILobbyManager/NotifyPlayerLeftLobby", ReplyAction="http://tempuri.org/ILobbyManager/NotifyPlayerLeftLobbyResponse")]
        void NotifyPlayerLeftLobby();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILobbyManager/NotifyStartOfMatch", ReplyAction="http://tempuri.org/ILobbyManager/NotifyStartOfMatchResponse")]
        void NotifyStartOfMatch();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILobbyManager/NotifyLobbyIsFull", ReplyAction="http://tempuri.org/ILobbyManager/NotifyLobbyIsFullResponse")]
        void NotifyLobbyIsFull();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILobbyManager/NotifyLobbyDoesNotExist", ReplyAction="http://tempuri.org/ILobbyManager/NotifyLobbyDoesNotExistResponse")]
        void NotifyLobbyDoesNotExist();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ILobbyManagerChannel : TimbiricheViews.Server.ILobbyManager, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LobbyManagerClient : System.ServiceModel.DuplexClientBase<TimbiricheViews.Server.ILobbyManager>, TimbiricheViews.Server.ILobbyManager {
        
        public LobbyManagerClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public LobbyManagerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public LobbyManagerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public LobbyManagerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public LobbyManagerClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void CreateLobby(TimbiricheViews.Server.LobbyInformation lobbyInformation, TimbiricheViews.Server.LobbyPlayer lobbyPlayer) {
            base.Channel.CreateLobby(lobbyInformation, lobbyPlayer);
        }
        
        public System.Threading.Tasks.Task CreateLobbyAsync(TimbiricheViews.Server.LobbyInformation lobbyInformation, TimbiricheViews.Server.LobbyPlayer lobbyPlayer) {
            return base.Channel.CreateLobbyAsync(lobbyInformation, lobbyPlayer);
        }
        
        public void StartMatch(string lobbyCode) {
            base.Channel.StartMatch(lobbyCode);
        }
        
        public System.Threading.Tasks.Task StartMatchAsync(string lobbyCode) {
            return base.Channel.StartMatchAsync(lobbyCode);
        }
        
        public void JoinLobby(string lobbyCode, TimbiricheViews.Server.LobbyPlayer lobbyPlayer) {
            base.Channel.JoinLobby(lobbyCode, lobbyPlayer);
        }
        
        public System.Threading.Tasks.Task JoinLobbyAsync(string lobbyCode, TimbiricheViews.Server.LobbyPlayer lobbyPlayer) {
            return base.Channel.JoinLobbyAsync(lobbyCode, lobbyPlayer);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Server.IMatchManager", CallbackContract=typeof(TimbiricheViews.Server.IMatchManagerCallback))]
    public interface IMatchManager {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMatchManager/RegisterToTheMatch")]
        void RegisterToTheMatch(string lobbyCode, string username);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMatchManager/RegisterToTheMatch")]
        System.Threading.Tasks.Task RegisterToTheMatchAsync(string lobbyCode, string username);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMatchManager/EndTurn")]
        void EndTurn(string lobbyCode, string typeLine, int row, int column, int points);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMatchManager/EndTurn")]
        System.Threading.Tasks.Task EndTurnAsync(string lobbyCode, string typeLine, int row, int column, int points);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMatchManager/EndTurnWithoutMovement")]
        void EndTurnWithoutMovement(string lobbyCode);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMatchManager/EndTurnWithoutMovement")]
        System.Threading.Tasks.Task EndTurnWithoutMovementAsync(string lobbyCode);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMatchManager/SendMessageToLobby")]
        void SendMessageToLobby(string lobbyCode, string senderUsername, string message);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMatchManager/SendMessageToLobby")]
        System.Threading.Tasks.Task SendMessageToLobbyAsync(string lobbyCode, string senderUsername, string message);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMatchManagerCallback {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMatchManager/NotifyNewTurn", ReplyAction="http://tempuri.org/IMatchManager/NotifyNewTurnResponse")]
        void NotifyNewTurn(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMatchManager/NotifyMovement", ReplyAction="http://tempuri.org/IMatchManager/NotifyMovementResponse")]
        void NotifyMovement(string typeLine, int row, int column);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMatchManager/NotifyFirstTurn", ReplyAction="http://tempuri.org/IMatchManager/NotifyFirstTurnResponse")]
        void NotifyFirstTurn(int matchDurationInMinutes, int turnDurationInMinutes, string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMatchManager/NotifyNewScoreboard", ReplyAction="http://tempuri.org/IMatchManager/NotifyNewScoreboardResponse")]
        void NotifyNewScoreboard(System.Collections.Generic.KeyValuePair<string, int>[] scoreboard);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMatchManager/NotifyNewMessage", ReplyAction="http://tempuri.org/IMatchManager/NotifyNewMessageResponse")]
        void NotifyNewMessage(string senderUsername, string message);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMatchManagerChannel : TimbiricheViews.Server.IMatchManager, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MatchManagerClient : System.ServiceModel.DuplexClientBase<TimbiricheViews.Server.IMatchManager>, TimbiricheViews.Server.IMatchManager {
        
        public MatchManagerClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public MatchManagerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public MatchManagerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public MatchManagerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public MatchManagerClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void RegisterToTheMatch(string lobbyCode, string username) {
            base.Channel.RegisterToTheMatch(lobbyCode, username);
        }
        
        public System.Threading.Tasks.Task RegisterToTheMatchAsync(string lobbyCode, string username) {
            return base.Channel.RegisterToTheMatchAsync(lobbyCode, username);
        }
        
        public void EndTurn(string lobbyCode, string typeLine, int row, int column, int points) {
            base.Channel.EndTurn(lobbyCode, typeLine, row, column, points);
        }
        
        public System.Threading.Tasks.Task EndTurnAsync(string lobbyCode, string typeLine, int row, int column, int points) {
            return base.Channel.EndTurnAsync(lobbyCode, typeLine, row, column, points);
        }
        
        public void EndTurnWithoutMovement(string lobbyCode) {
            base.Channel.EndTurnWithoutMovement(lobbyCode);
        }
        
        public System.Threading.Tasks.Task EndTurnWithoutMovementAsync(string lobbyCode) {
            return base.Channel.EndTurnWithoutMovementAsync(lobbyCode);
        }
        
        public void SendMessageToLobby(string lobbyCode, string senderUsername, string message) {
            base.Channel.SendMessageToLobby(lobbyCode, senderUsername, message);
        }
        
        public System.Threading.Tasks.Task SendMessageToLobbyAsync(string lobbyCode, string senderUsername, string message) {
            return base.Channel.SendMessageToLobbyAsync(lobbyCode, senderUsername, message);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Server.IEmailVerificationManager")]
    public interface IEmailVerificationManager {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEmailVerificationManager/SendEmailToken", ReplyAction="http://tempuri.org/IEmailVerificationManager/SendEmailTokenResponse")]
        bool SendEmailToken(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEmailVerificationManager/SendEmailToken", ReplyAction="http://tempuri.org/IEmailVerificationManager/SendEmailTokenResponse")]
        System.Threading.Tasks.Task<bool> SendEmailTokenAsync(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEmailVerificationManager/VerifyEmailToken", ReplyAction="http://tempuri.org/IEmailVerificationManager/VerifyEmailTokenResponse")]
        bool VerifyEmailToken(string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEmailVerificationManager/VerifyEmailToken", ReplyAction="http://tempuri.org/IEmailVerificationManager/VerifyEmailTokenResponse")]
        System.Threading.Tasks.Task<bool> VerifyEmailTokenAsync(string token);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IEmailVerificationManagerChannel : TimbiricheViews.Server.IEmailVerificationManager, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class EmailVerificationManagerClient : System.ServiceModel.ClientBase<TimbiricheViews.Server.IEmailVerificationManager>, TimbiricheViews.Server.IEmailVerificationManager {
        
        public EmailVerificationManagerClient() {
        }
        
        public EmailVerificationManagerClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public EmailVerificationManagerClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public EmailVerificationManagerClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public EmailVerificationManagerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool SendEmailToken(string email) {
            return base.Channel.SendEmailToken(email);
        }
        
        public System.Threading.Tasks.Task<bool> SendEmailTokenAsync(string email) {
            return base.Channel.SendEmailTokenAsync(email);
        }
        
        public bool VerifyEmailToken(string token) {
            return base.Channel.VerifyEmailToken(token);
        }
        
        public System.Threading.Tasks.Task<bool> VerifyEmailTokenAsync(string token) {
            return base.Channel.VerifyEmailTokenAsync(token);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Server.IPlayerCustomizationManager")]
    public interface IPlayerCustomizationManager {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerCustomizationManager/GetMyColors", ReplyAction="http://tempuri.org/IPlayerCustomizationManager/GetMyColorsResponse")]
        TimbiricheViews.Server.PlayerColor[] GetMyColors(int idPlayer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerCustomizationManager/GetMyColors", ReplyAction="http://tempuri.org/IPlayerCustomizationManager/GetMyColorsResponse")]
        System.Threading.Tasks.Task<TimbiricheViews.Server.PlayerColor[]> GetMyColorsAsync(int idPlayer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerCustomizationManager/GetHexadecimalColors", ReplyAction="http://tempuri.org/IPlayerCustomizationManager/GetHexadecimalColorsResponse")]
        string GetHexadecimalColors(int idColor);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerCustomizationManager/GetHexadecimalColors", ReplyAction="http://tempuri.org/IPlayerCustomizationManager/GetHexadecimalColorsResponse")]
        System.Threading.Tasks.Task<string> GetHexadecimalColorsAsync(int idColor);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerCustomizationManager/SelectMyColor", ReplyAction="http://tempuri.org/IPlayerCustomizationManager/SelectMyColorResponse")]
        int SelectMyColor(int idPlayer, int idColor);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerCustomizationManager/SelectMyColor", ReplyAction="http://tempuri.org/IPlayerCustomizationManager/SelectMyColorResponse")]
        System.Threading.Tasks.Task<int> SelectMyColorAsync(int idPlayer, int idColor);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerCustomizationManager/CheckColorForPlayer", ReplyAction="http://tempuri.org/IPlayerCustomizationManager/CheckColorForPlayerResponse")]
        bool CheckColorForPlayer(int idPlayer, int idColor);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerCustomizationManager/CheckColorForPlayer", ReplyAction="http://tempuri.org/IPlayerCustomizationManager/CheckColorForPlayerResponse")]
        System.Threading.Tasks.Task<bool> CheckColorForPlayerAsync(int idPlayer, int idColor);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerCustomizationManager/GetMyStyles", ReplyAction="http://tempuri.org/IPlayerCustomizationManager/GetMyStylesResponse")]
        TimbiricheViews.Server.PlayerStyle[] GetMyStyles(int idPlayer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerCustomizationManager/GetMyStyles", ReplyAction="http://tempuri.org/IPlayerCustomizationManager/GetMyStylesResponse")]
        System.Threading.Tasks.Task<TimbiricheViews.Server.PlayerStyle[]> GetMyStylesAsync(int idPlayer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerCustomizationManager/GetStylePath", ReplyAction="http://tempuri.org/IPlayerCustomizationManager/GetStylePathResponse")]
        string GetStylePath(int idStyle);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerCustomizationManager/GetStylePath", ReplyAction="http://tempuri.org/IPlayerCustomizationManager/GetStylePathResponse")]
        System.Threading.Tasks.Task<string> GetStylePathAsync(int idStyle);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerCustomizationManager/SelectMyStyle", ReplyAction="http://tempuri.org/IPlayerCustomizationManager/SelectMyStyleResponse")]
        int SelectMyStyle(int idPlayer, int idStyle);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerCustomizationManager/SelectMyStyle", ReplyAction="http://tempuri.org/IPlayerCustomizationManager/SelectMyStyleResponse")]
        System.Threading.Tasks.Task<int> SelectMyStyleAsync(int idPlayer, int idStyle);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPlayerCustomizationManagerChannel : TimbiricheViews.Server.IPlayerCustomizationManager, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PlayerCustomizationManagerClient : System.ServiceModel.ClientBase<TimbiricheViews.Server.IPlayerCustomizationManager>, TimbiricheViews.Server.IPlayerCustomizationManager {
        
        public PlayerCustomizationManagerClient() {
        }
        
        public PlayerCustomizationManagerClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public PlayerCustomizationManagerClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PlayerCustomizationManagerClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PlayerCustomizationManagerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public TimbiricheViews.Server.PlayerColor[] GetMyColors(int idPlayer) {
            return base.Channel.GetMyColors(idPlayer);
        }
        
        public System.Threading.Tasks.Task<TimbiricheViews.Server.PlayerColor[]> GetMyColorsAsync(int idPlayer) {
            return base.Channel.GetMyColorsAsync(idPlayer);
        }
        
        public string GetHexadecimalColors(int idColor) {
            return base.Channel.GetHexadecimalColors(idColor);
        }
        
        public System.Threading.Tasks.Task<string> GetHexadecimalColorsAsync(int idColor) {
            return base.Channel.GetHexadecimalColorsAsync(idColor);
        }
        
        public int SelectMyColor(int idPlayer, int idColor) {
            return base.Channel.SelectMyColor(idPlayer, idColor);
        }
        
        public System.Threading.Tasks.Task<int> SelectMyColorAsync(int idPlayer, int idColor) {
            return base.Channel.SelectMyColorAsync(idPlayer, idColor);
        }
        
        public bool CheckColorForPlayer(int idPlayer, int idColor) {
            return base.Channel.CheckColorForPlayer(idPlayer, idColor);
        }
        
        public System.Threading.Tasks.Task<bool> CheckColorForPlayerAsync(int idPlayer, int idColor) {
            return base.Channel.CheckColorForPlayerAsync(idPlayer, idColor);
        }
        
        public TimbiricheViews.Server.PlayerStyle[] GetMyStyles(int idPlayer) {
            return base.Channel.GetMyStyles(idPlayer);
        }
        
        public System.Threading.Tasks.Task<TimbiricheViews.Server.PlayerStyle[]> GetMyStylesAsync(int idPlayer) {
            return base.Channel.GetMyStylesAsync(idPlayer);
        }
        
        public string GetStylePath(int idStyle) {
            return base.Channel.GetStylePath(idStyle);
        }
        
        public System.Threading.Tasks.Task<string> GetStylePathAsync(int idStyle) {
            return base.Channel.GetStylePathAsync(idStyle);
        }
        
        public int SelectMyStyle(int idPlayer, int idStyle) {
            return base.Channel.SelectMyStyle(idPlayer, idStyle);
        }
        
        public System.Threading.Tasks.Task<int> SelectMyStyleAsync(int idPlayer, int idStyle) {
            return base.Channel.SelectMyStyleAsync(idPlayer, idStyle);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Server.IPlayerColorsManager", CallbackContract=typeof(TimbiricheViews.Server.IPlayerColorsManagerCallback))]
    public interface IPlayerColorsManager {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPlayerColorsManager/SubscribeColorToColorsSelected")]
        void SubscribeColorToColorsSelected(string lobbyCode);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPlayerColorsManager/SubscribeColorToColorsSelected")]
        System.Threading.Tasks.Task SubscribeColorToColorsSelectedAsync(string lobbyCode);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPlayerColorsManager/RenewSubscriptionToColorsSelected")]
        void RenewSubscriptionToColorsSelected(string lobbyCode, TimbiricheViews.Server.LobbyPlayer lobbyPlayer);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPlayerColorsManager/RenewSubscriptionToColorsSelected")]
        System.Threading.Tasks.Task RenewSubscriptionToColorsSelectedAsync(string lobbyCode, TimbiricheViews.Server.LobbyPlayer lobbyPlayer);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPlayerColorsManager/UnsubscribeColorToColorsSelected")]
        void UnsubscribeColorToColorsSelected(string lobbyCode, TimbiricheViews.Server.LobbyPlayer lobbyPlayer);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPlayerColorsManager/UnsubscribeColorToColorsSelected")]
        System.Threading.Tasks.Task UnsubscribeColorToColorsSelectedAsync(string lobbyCode, TimbiricheViews.Server.LobbyPlayer lobbyPlayer);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPlayerColorsManagerCallback {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerColorsManager/NotifyColorSelected", ReplyAction="http://tempuri.org/IPlayerColorsManager/NotifyColorSelectedResponse")]
        void NotifyColorSelected(TimbiricheViews.Server.LobbyPlayer lobbyPlayer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerColorsManager/NotifyColorUnselected", ReplyAction="http://tempuri.org/IPlayerColorsManager/NotifyColorUnselectedResponse")]
        void NotifyColorUnselected(int idUnselectedColor);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerColorsManager/NotifyOccupiedColors", ReplyAction="http://tempuri.org/IPlayerColorsManager/NotifyOccupiedColorsResponse")]
        void NotifyOccupiedColors(TimbiricheViews.Server.LobbyPlayer[] occupiedColors);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPlayerColorsManagerChannel : TimbiricheViews.Server.IPlayerColorsManager, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PlayerColorsManagerClient : System.ServiceModel.DuplexClientBase<TimbiricheViews.Server.IPlayerColorsManager>, TimbiricheViews.Server.IPlayerColorsManager {
        
        public PlayerColorsManagerClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public PlayerColorsManagerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public PlayerColorsManagerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public PlayerColorsManagerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public PlayerColorsManagerClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void SubscribeColorToColorsSelected(string lobbyCode) {
            base.Channel.SubscribeColorToColorsSelected(lobbyCode);
        }
        
        public System.Threading.Tasks.Task SubscribeColorToColorsSelectedAsync(string lobbyCode) {
            return base.Channel.SubscribeColorToColorsSelectedAsync(lobbyCode);
        }
        
        public void RenewSubscriptionToColorsSelected(string lobbyCode, TimbiricheViews.Server.LobbyPlayer lobbyPlayer) {
            base.Channel.RenewSubscriptionToColorsSelected(lobbyCode, lobbyPlayer);
        }
        
        public System.Threading.Tasks.Task RenewSubscriptionToColorsSelectedAsync(string lobbyCode, TimbiricheViews.Server.LobbyPlayer lobbyPlayer) {
            return base.Channel.RenewSubscriptionToColorsSelectedAsync(lobbyCode, lobbyPlayer);
        }
        
        public void UnsubscribeColorToColorsSelected(string lobbyCode, TimbiricheViews.Server.LobbyPlayer lobbyPlayer) {
            base.Channel.UnsubscribeColorToColorsSelected(lobbyCode, lobbyPlayer);
        }
        
        public System.Threading.Tasks.Task UnsubscribeColorToColorsSelectedAsync(string lobbyCode, TimbiricheViews.Server.LobbyPlayer lobbyPlayer) {
            return base.Channel.UnsubscribeColorToColorsSelectedAsync(lobbyCode, lobbyPlayer);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Server.IInvitationManager")]
    public interface IInvitationManager {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInvitationManager/SendInvitationToEmail", ReplyAction="http://tempuri.org/IInvitationManager/SendInvitationToEmailResponse")]
        bool SendInvitationToEmail(string lobbyCode, string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInvitationManager/SendInvitationToEmail", ReplyAction="http://tempuri.org/IInvitationManager/SendInvitationToEmailResponse")]
        System.Threading.Tasks.Task<bool> SendInvitationToEmailAsync(string lobbyCode, string email);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IInvitationManagerChannel : TimbiricheViews.Server.IInvitationManager, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class InvitationManagerClient : System.ServiceModel.ClientBase<TimbiricheViews.Server.IInvitationManager>, TimbiricheViews.Server.IInvitationManager {
        
        public InvitationManagerClient() {
        }
        
        public InvitationManagerClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public InvitationManagerClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public InvitationManagerClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public InvitationManagerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool SendInvitationToEmail(string lobbyCode, string email) {
            return base.Channel.SendInvitationToEmail(lobbyCode, email);
        }
        
        public System.Threading.Tasks.Task<bool> SendInvitationToEmailAsync(string lobbyCode, string email) {
            return base.Channel.SendInvitationToEmailAsync(lobbyCode, email);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Server.IPlayerStylesManager", CallbackContract=typeof(TimbiricheViews.Server.IPlayerStylesManagerCallback))]
    public interface IPlayerStylesManager {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPlayerStylesManager/AddStyleCallbackToLobbiesList")]
        void AddStyleCallbackToLobbiesList(string lobbyCode, TimbiricheViews.Server.LobbyPlayer lobbyPlayer);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPlayerStylesManager/AddStyleCallbackToLobbiesList")]
        System.Threading.Tasks.Task AddStyleCallbackToLobbiesListAsync(string lobbyCode, TimbiricheViews.Server.LobbyPlayer lobbyPlayer);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPlayerStylesManager/ChooseStyle")]
        void ChooseStyle(string lobbyCode, TimbiricheViews.Server.LobbyPlayer lobbyPlayer);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPlayerStylesManager/ChooseStyle")]
        System.Threading.Tasks.Task ChooseStyleAsync(string lobbyCode, TimbiricheViews.Server.LobbyPlayer lobbyPlayer);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPlayerStylesManagerCallback {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerStylesManager/NotifyStyleSelected", ReplyAction="http://tempuri.org/IPlayerStylesManager/NotifyStyleSelectedResponse")]
        void NotifyStyleSelected(TimbiricheViews.Server.LobbyPlayer lobbyPlayer);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPlayerStylesManagerChannel : TimbiricheViews.Server.IPlayerStylesManager, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PlayerStylesManagerClient : System.ServiceModel.DuplexClientBase<TimbiricheViews.Server.IPlayerStylesManager>, TimbiricheViews.Server.IPlayerStylesManager {
        
        public PlayerStylesManagerClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public PlayerStylesManagerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public PlayerStylesManagerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public PlayerStylesManagerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public PlayerStylesManagerClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void AddStyleCallbackToLobbiesList(string lobbyCode, TimbiricheViews.Server.LobbyPlayer lobbyPlayer) {
            base.Channel.AddStyleCallbackToLobbiesList(lobbyCode, lobbyPlayer);
        }
        
        public System.Threading.Tasks.Task AddStyleCallbackToLobbiesListAsync(string lobbyCode, TimbiricheViews.Server.LobbyPlayer lobbyPlayer) {
            return base.Channel.AddStyleCallbackToLobbiesListAsync(lobbyCode, lobbyPlayer);
        }
        
        public void ChooseStyle(string lobbyCode, TimbiricheViews.Server.LobbyPlayer lobbyPlayer) {
            base.Channel.ChooseStyle(lobbyCode, lobbyPlayer);
        }
        
        public System.Threading.Tasks.Task ChooseStyleAsync(string lobbyCode, TimbiricheViews.Server.LobbyPlayer lobbyPlayer) {
            return base.Channel.ChooseStyleAsync(lobbyCode, lobbyPlayer);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Server.IFriendshipManager")]
    public interface IFriendshipManager {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendshipManager/GetListUsernameFriends", ReplyAction="http://tempuri.org/IFriendshipManager/GetListUsernameFriendsResponse")]
        string[] GetListUsernameFriends(int idPlayer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendshipManager/GetListUsernameFriends", ReplyAction="http://tempuri.org/IFriendshipManager/GetListUsernameFriendsResponse")]
        System.Threading.Tasks.Task<string[]> GetListUsernameFriendsAsync(int idPlayer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendshipManager/ValidateFriendRequestSending", ReplyAction="http://tempuri.org/IFriendshipManager/ValidateFriendRequestSendingResponse")]
        bool ValidateFriendRequestSending(int idPlayerSender, string usernamePlayerRequested);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendshipManager/ValidateFriendRequestSending", ReplyAction="http://tempuri.org/IFriendshipManager/ValidateFriendRequestSendingResponse")]
        System.Threading.Tasks.Task<bool> ValidateFriendRequestSendingAsync(int idPlayerSender, string usernamePlayerRequested);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendshipManager/AddRequestFriendship", ReplyAction="http://tempuri.org/IFriendshipManager/AddRequestFriendshipResponse")]
        int AddRequestFriendship(int idPlayerSender, string usernamePlayerRequested);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendshipManager/AddRequestFriendship", ReplyAction="http://tempuri.org/IFriendshipManager/AddRequestFriendshipResponse")]
        System.Threading.Tasks.Task<int> AddRequestFriendshipAsync(int idPlayerSender, string usernamePlayerRequested);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendshipManager/GetUsernamePlayersRequesters", ReplyAction="http://tempuri.org/IFriendshipManager/GetUsernamePlayersRequestersResponse")]
        string[] GetUsernamePlayersRequesters(int idPlayer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendshipManager/GetUsernamePlayersRequesters", ReplyAction="http://tempuri.org/IFriendshipManager/GetUsernamePlayersRequestersResponse")]
        System.Threading.Tasks.Task<string[]> GetUsernamePlayersRequestersAsync(int idPlayer);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IFriendshipManagerChannel : TimbiricheViews.Server.IFriendshipManager, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FriendshipManagerClient : System.ServiceModel.ClientBase<TimbiricheViews.Server.IFriendshipManager>, TimbiricheViews.Server.IFriendshipManager {
        
        public FriendshipManagerClient() {
        }
        
        public FriendshipManagerClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public FriendshipManagerClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FriendshipManagerClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FriendshipManagerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string[] GetListUsernameFriends(int idPlayer) {
            return base.Channel.GetListUsernameFriends(idPlayer);
        }
        
        public System.Threading.Tasks.Task<string[]> GetListUsernameFriendsAsync(int idPlayer) {
            return base.Channel.GetListUsernameFriendsAsync(idPlayer);
        }
        
        public bool ValidateFriendRequestSending(int idPlayerSender, string usernamePlayerRequested) {
            return base.Channel.ValidateFriendRequestSending(idPlayerSender, usernamePlayerRequested);
        }
        
        public System.Threading.Tasks.Task<bool> ValidateFriendRequestSendingAsync(int idPlayerSender, string usernamePlayerRequested) {
            return base.Channel.ValidateFriendRequestSendingAsync(idPlayerSender, usernamePlayerRequested);
        }
        
        public int AddRequestFriendship(int idPlayerSender, string usernamePlayerRequested) {
            return base.Channel.AddRequestFriendship(idPlayerSender, usernamePlayerRequested);
        }
        
        public System.Threading.Tasks.Task<int> AddRequestFriendshipAsync(int idPlayerSender, string usernamePlayerRequested) {
            return base.Channel.AddRequestFriendshipAsync(idPlayerSender, usernamePlayerRequested);
        }
        
        public string[] GetUsernamePlayersRequesters(int idPlayer) {
            return base.Channel.GetUsernamePlayersRequesters(idPlayer);
        }
        
        public System.Threading.Tasks.Task<string[]> GetUsernamePlayersRequestersAsync(int idPlayer) {
            return base.Channel.GetUsernamePlayersRequestersAsync(idPlayer);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Server.IFriendRequestManager", CallbackContract=typeof(TimbiricheViews.Server.IFriendRequestManagerCallback))]
    public interface IFriendRequestManager {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IFriendRequestManager/AddToOnlineFriendshipDictionary")]
        void AddToOnlineFriendshipDictionary(string usernameCurrentPlayer);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IFriendRequestManager/AddToOnlineFriendshipDictionary")]
        System.Threading.Tasks.Task AddToOnlineFriendshipDictionaryAsync(string usernameCurrentPlayer);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IFriendRequestManager/SendFriendRequest")]
        void SendFriendRequest(string usernamePlayerSender, string usernamePlayerRequested);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IFriendRequestManager/SendFriendRequest")]
        System.Threading.Tasks.Task SendFriendRequestAsync(string usernamePlayerSender, string usernamePlayerRequested);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IFriendRequestManager/AcceptFriendRequest")]
        void AcceptFriendRequest(int idPlayerRequested, string usernamePlayerRequested, string usernamePlayerSender);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IFriendRequestManager/AcceptFriendRequest")]
        System.Threading.Tasks.Task AcceptFriendRequestAsync(int idPlayerRequested, string usernamePlayerRequested, string usernamePlayerSender);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IFriendRequestManager/RejectFriendRequest")]
        void RejectFriendRequest(int idCurrentPlayer, string username);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IFriendRequestManager/RejectFriendRequest")]
        System.Threading.Tasks.Task RejectFriendRequestAsync(int idCurrentPlayer, string username);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IFriendRequestManager/DeleteFriend")]
        void DeleteFriend(int idCurrentPlayer, string usernameCurrentPlayer, string usernameFriendDeleted);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IFriendRequestManager/DeleteFriend")]
        System.Threading.Tasks.Task DeleteFriendAsync(int idCurrentPlayer, string usernameCurrentPlayer, string usernameFriendDeleted);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IFriendRequestManagerCallback {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendRequestManager/NotifyNewFriendRequest", ReplyAction="http://tempuri.org/IFriendRequestManager/NotifyNewFriendRequestResponse")]
        void NotifyNewFriendRequest(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendRequestManager/NotifyFriendRequestAccepted", ReplyAction="http://tempuri.org/IFriendRequestManager/NotifyFriendRequestAcceptedResponse")]
        void NotifyFriendRequestAccepted(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendRequestManager/NotifyDeletedFriend", ReplyAction="http://tempuri.org/IFriendRequestManager/NotifyDeletedFriendResponse")]
        void NotifyDeletedFriend(string username);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IFriendRequestManagerChannel : TimbiricheViews.Server.IFriendRequestManager, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FriendRequestManagerClient : System.ServiceModel.DuplexClientBase<TimbiricheViews.Server.IFriendRequestManager>, TimbiricheViews.Server.IFriendRequestManager {
        
        public FriendRequestManagerClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public FriendRequestManagerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public FriendRequestManagerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public FriendRequestManagerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public FriendRequestManagerClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void AddToOnlineFriendshipDictionary(string usernameCurrentPlayer) {
            base.Channel.AddToOnlineFriendshipDictionary(usernameCurrentPlayer);
        }
        
        public System.Threading.Tasks.Task AddToOnlineFriendshipDictionaryAsync(string usernameCurrentPlayer) {
            return base.Channel.AddToOnlineFriendshipDictionaryAsync(usernameCurrentPlayer);
        }
        
        public void SendFriendRequest(string usernamePlayerSender, string usernamePlayerRequested) {
            base.Channel.SendFriendRequest(usernamePlayerSender, usernamePlayerRequested);
        }
        
        public System.Threading.Tasks.Task SendFriendRequestAsync(string usernamePlayerSender, string usernamePlayerRequested) {
            return base.Channel.SendFriendRequestAsync(usernamePlayerSender, usernamePlayerRequested);
        }
        
        public void AcceptFriendRequest(int idPlayerRequested, string usernamePlayerRequested, string usernamePlayerSender) {
            base.Channel.AcceptFriendRequest(idPlayerRequested, usernamePlayerRequested, usernamePlayerSender);
        }
        
        public System.Threading.Tasks.Task AcceptFriendRequestAsync(int idPlayerRequested, string usernamePlayerRequested, string usernamePlayerSender) {
            return base.Channel.AcceptFriendRequestAsync(idPlayerRequested, usernamePlayerRequested, usernamePlayerSender);
        }
        
        public void RejectFriendRequest(int idCurrentPlayer, string username) {
            base.Channel.RejectFriendRequest(idCurrentPlayer, username);
        }
        
        public System.Threading.Tasks.Task RejectFriendRequestAsync(int idCurrentPlayer, string username) {
            return base.Channel.RejectFriendRequestAsync(idCurrentPlayer, username);
        }
        
        public void DeleteFriend(int idCurrentPlayer, string usernameCurrentPlayer, string usernameFriendDeleted) {
            base.Channel.DeleteFriend(idCurrentPlayer, usernameCurrentPlayer, usernameFriendDeleted);
        }
        
        public System.Threading.Tasks.Task DeleteFriendAsync(int idCurrentPlayer, string usernameCurrentPlayer, string usernameFriendDeleted) {
            return base.Channel.DeleteFriendAsync(idCurrentPlayer, usernameCurrentPlayer, usernameFriendDeleted);
        }
    }
}
